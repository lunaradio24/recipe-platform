generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {

  userId          Int           @id @default(autoincrement()) @map("user_id")
  email           String        @unique @map("email")
  password        String        @map("password")
  username        String        @map("username")
  profileImage    String?       @map("profile_image")
  introduction    String?       @map("introduction")
  followerCount   Int           @default(0) @map("follower_count")
  emailVerified         Boolean       @default(false) @map("email_verified")
  emailVerificationToken String?      @map("email_verification_token")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  post            Post[]
  comment         Comment[]
  postLike        PostLike[]
  commentLike     CommentLike[]
  refreshToken    RefreshToken?
  following       Follow[]      @relation("following")
  follower        Follow[]      @relation("follower")

  @@map("users")
}

model Post {
  postId    Int      @id @default(autoincrement()) @map("post_id")
  authorId  Int      @map("author_id")
  title     String   @map("title")
  content   String   @map("content") @db.Text
  imageUrl  String?  @map("image_url")
  likeCount Int      @default(0) @map("like_count")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user     User       @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  comment  Comment[]
  postLike PostLike[]

  @@map("posts")
}

model Comment {
  commentId   Int      @id @default(autoincrement()) @map("comment_id")
  commenterId Int      @map("commenter_id")
  postId      Int      @map("post_id")
  content     String   @map("content")
  likeCount   Int      @default(0) @map("like_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User          @relation(fields: [commenterId], references: [userId], onDelete: Cascade)
  post        Post          @relation(fields: [postId], references: [postId], onDelete: Cascade)
  commentLike CommentLike[]

  @@map("comments")
}

model PostLike {
  post_like_id      Int           @id @default(autoincrement()) @map("post_like_id")
  userId            Int           @map("user_id")
  postId            Int           @map("post_id")
  createdAt         DateTime      @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [postId], onDelete: Cascade)

  @@map("post_likes")
}

model CommentLike {

  comment_like_id   Int           @id @default(autoincrement()) @map("comment_like_id")
  userId            Int           @map("user_id")
  commentId         Int           @map("comment_id")
  createdAt         DateTime      @default(now()) @map("created_at")


  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [commentId], onDelete: Cascade)

  @@map("comment_likes")
}

model RefreshToken {

  id              Int             @id @default(autoincrement()) @map("token_id")
  userId          Int             @unique @map("user_id") // userId를 고유 값으로 설정
  token           String?         @map("refresh_token")
  createdAt       DateTime        @default(now()) @map("create_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  user            User            @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Follow {

  followId          Int           @id @default(autoincrement()) @map("follow_id")
  followingUserId   Int           @map("following_user_id")
  followerUserId    Int           @map("follower_user_id")
  createdAt         DateTime      @default(now()) @map("created_at")

  followingUser     User          @relation("following", fields: [followingUserId], references: [userId], onDelete: Cascade)
  followerUser      User          @relation("follower",fields: [followerUserId], references: [userId], onDelete: Cascade)

  @@map("follows")
}
