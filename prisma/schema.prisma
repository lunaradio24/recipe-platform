generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int      @id @default(autoincrement()) @map("user_id")
  email        String   @unique @map("email")
  password     String   @map("password")
  username     String   @map("username")
  profileImage String?  @map("profile_image")
  introduction String?  @map("one_liner")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  post          Post[]
  comment       Comment[]
  like          Like[]
  refreshTokens RefreshToken?

  @@map("users")
}



model Post {
  postId    Int      @id @default(autoincrement()) @map("post_id")
  userId    Int      @map("user_id")
  title     String   @map("title")
  content   String   @map("content") @db.Text
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  comment Comment[]
  like    Like[]

  @@map("posts")
}

model Comment {
  commentId Int      @id @default(autoincrement()) @map("comment_id")
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post Post   @relation(fields: [postId], references: [postId], onDelete: Cascade)
  like Like[]

  @@map("comments")
}

model Like {
  likeId    BigInt   @id @default(autoincrement()) @map("like_id")
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  commentId Int?     @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post    Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [commentId], onDelete: Cascade)

  @@map("likes")
}

model RefreshToken {
  id        Int      @id @default(autoincrement()) @map("token_id")
  userId    Int      @unique @map("user_Id") // userId를 고유 값으로 설정
  token     String?   @map("refresh_token")
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("RefreshTokens")
}